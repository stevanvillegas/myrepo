Power BI Desktop: my learning experience

Here is my learning experience documentation where I showcase my work and any additional notes.



Assignment 1: Directions
- Upload excel file into Power BI Desktop (load)
- create a new measure for each city calculating the sum
* - For visualizations (seen in PowerBI_myVisualizations assignment1(1st picture)), use cards and a donut chart


Assignment 1: Syntax
  AuburnCitySales = CALCULATE(SUM(Sales_Table[Sale Value]), FILTER('Sales_Table', [City]="Auburn"))
  ColumbiaCitySales = CALCULATE(SUM(Sales_Table[Sale Value]), FILTER('Sales_Table', [City]="Columbia"))
  ColumbusCitySales = CALCULATE(SUM(Sales_Table[Sale Value]), FILTER('Sales_Table', [City]="Columbus"))
  ConcordCitySales = CALCULATE(SUM(Sales_Table[Sale Value]), FILTER('Sales_Table', [City]="Concord"))
  DesMoinesCitySales = CALCULATE(SUM(Sales_Table[Sale Value]), FILTER('Sales_Table', [City]="Des Moines"))



Assignment 2: Directions
- Upload excel file into Power BI Desktop (load)
- Create a new table called 'All Measures'
- DAX Functions:
  - COUNTBLANK
  - DISTINCTCOUNT
  - AVG
  - MAX
  - MEDIAN
  - MIN
* - For visualizations (seen in PowerBI_myVisualizations assignment2(2nd picture)), use multi-row cards, clustered column charts, and a gauge


Assignment 2: Syntax
- Gives us the amount of blank cells (=0):
    AnyBlanks = COUNTBLANK(Stock[Make])
    
- Gives us the number of distinct makes (=7)
    DistinctCars = DISTINCTCOUNT(Stock[Make])

- Gives the average of each make as well as the overall average of all makes
    AvgCostAstonMartin = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="Aston Martin"))
    AvgCostBentley = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="Bentley"))
    AvgCostJaguar = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="Jaguar"))
    AvgCostMGB = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="MGB"))
    AvgCostRollsRoyce = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="Rolls Royce"))
    AvgCostTriumph = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="Triumph"))
    AvgCostTVR = CALCULATE(AVERAGE(Stock[CostPrice]), FILTER('Stock', [Make]="TVR"))
    AvgCostOverall = AVERAGE(Stock[CostPrice])

- Gives the max price of each make as well as the overall max price 
    MaxCostAstonMartin = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="Aston Martin"))
    MaxCostBentley = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="Bentley"))
    MaxCostJaguar = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="Jaguar"))
    MaxCostMGB = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="MGB"))
    MaxCostRollsRoyce = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="Rolls Royce"))
    MaxCostTriumph = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="Triumph"))
    MaxCostTVR = CALCULATE(MAX(Stock[CostPrice]), FILTER('Stock', [Make]="TVR"))
    MaxCostOverall = MAX(Stock[CostPrice])

- Gives the median price of each make as well as the overall median price
    MedianCostAstonMartin = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="Aston Martin"))
    MedianCostBentley = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="Bentley"))
    MedianCostJaguar = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="Jaguar"))
    MedianCostMGB = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="MGB"))
    MedianCostRollsRoyce = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="Rolls Royce"))
    MedianCostTriumph = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="Triumph"))
    MedianCostTVR = CALCULATE(MEDIAN(Stock[CostPrice]), FILTER('Stock', [Make]="TVR"))
    MedianCostOverall = MEDIAN(Stock[CostPrice])

- Gives the minimum cost of each make as well as the overall minimum cost
    MinCostAstonMartin = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="Aston Martin"))
    MinCostBentley = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="Bentley"))
    MinCostJaguar = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="Jaguar"))
    MinCostMGB = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="MGB"))
    MinCostRollsRoyce = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="Rolls Royce"))
    MinCostTriumph = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="Triumph"))
    MinCostTVR = CALCULATE(MIN(Stock[CostPrice]), FILTER('Stock', [Make]="TVR"))
    MinCostOverall = MIN(Stock[CostPrice])



Assignment 3: Directions
- upload a text/csv file into Power BI Desktop
- use tooltips, slicers, a treemap, and a table
- use interactions to make slicers interactive with treemap
* - seen in PowerBI_myVisualizations assignment3(3rd picture)
- no syntax for this assignment



Additional Notes:
- Buisness Intelligence (BI) leverages software and services to transform data into actionable insights that informs an organization's strategic and tactical buisness deicisions
- Data analysis is the process of inspecting, cleansing, transformation, and modelling
- Power BI is a buisness analystics solution to create data visualization interfaces such as graphs, charts, pie charts, etc,
- Data visualization is the graphical representation of information and data
- Microsoft Power BI Pro is a SaaS
- *using Paperspace for Power BI (Mac user)
- Pivot is used to transform rows to columns
- Unpivot is used to transform columns to rows
- Splitting columns allows you to split one column into multiple using delimiters, number of characters, etc,.
- A star schema is a description of datasets; consists of one or more fact tables which reference any number of dimension tables
  - Fact tables contain measureable facts, metrics (ID#'s)
  - Dimension (DIM) tables is a companion to the fact table which contains descriptive attributes
- when using the "new source" action, make sure to use "transform table"
- to undo actions within Power BI, go to "Query Settings" view and [x] any undesirable "applied steps"
- use "duplicate" to copy a table (recommended), use reference for correlating changes (not commonly used)
- Conditional columns are columns created based on a condition imposed on an existing column
- DAX (data analysis expressions) is used for mathematical operations such as arithmetic, comparison, logical and text concatenation; similar to excel functions; creates insights
- Cardinality: each relationship can be modelled based on a cardinality type such as 1-1, 1-M, M-M
- Cross-filter direction: each relationship is defined with a cross filter direction, which determines the direction that filters propogate; a single cross filter refers to a "single direction", and both refers to "both directions"
- calculated columns return a value for each row
- a measure returns one same value
- slicers
- creating hierarchy in fields
